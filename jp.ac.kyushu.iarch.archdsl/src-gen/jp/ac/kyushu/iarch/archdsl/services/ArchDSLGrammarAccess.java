/*
* generated by Xtext
*/
package jp.ac.kyushu.iarch.archdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ArchDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfacesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInterfacesInterfaceParserRuleCall_0_0 = (RuleCall)cInterfacesAssignment_0.eContents().get(0);
		private final Assignment cBehaviorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_1_0 = (RuleCall)cBehaviorsAssignment_1.eContents().get(0);
		private final Assignment cConnectorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConnectorsConnectorParserRuleCall_2_0 = (RuleCall)cConnectorsAssignment_2.eContents().get(0);
		private final Assignment cDflowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDflowsDFlowParserRuleCall_3_0 = (RuleCall)cDflowsAssignment_3.eContents().get(0);
		
		//Model:
		//	interfaces+=Interface* behaviors+=Behavior* connectors+=Connector* dflows+=DFlow*;
		public ParserRule getRule() { return rule; }

		//interfaces+=Interface* behaviors+=Behavior* connectors+=Connector* dflows+=DFlow*
		public Group getGroup() { return cGroup; }

		//interfaces+=Interface*
		public Assignment getInterfacesAssignment_0() { return cInterfacesAssignment_0; }

		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_0_0() { return cInterfacesInterfaceParserRuleCall_0_0; }

		//behaviors+=Behavior*
		public Assignment getBehaviorsAssignment_1() { return cBehaviorsAssignment_1; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_1_0() { return cBehaviorsBehaviorParserRuleCall_1_0; }

		//connectors+=Connector*
		public Assignment getConnectorsAssignment_2() { return cConnectorsAssignment_2; }

		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_2_0() { return cConnectorsConnectorParserRuleCall_2_0; }

		//dflows+=DFlow*
		public Assignment getDflowsAssignment_3() { return cDflowsAssignment_3; }

		//DFlow
		public RuleCall getDflowsDFlowParserRuleCall_3_0() { return cDflowsDFlowParserRuleCall_3_0; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Interface:
		//	"interface component" name=ID "{" methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//"interface component" name=ID "{" methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//"interface component"
		public Keyword getInterfaceComponentKeyword_0() { return cInterfaceComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//methods+=Method*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_3_0() { return cMethodsMethodParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_3_0_0 = (RuleCall)cParamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_3_1_1_0 = (RuleCall)cParamAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	type=ID name=ID "(" (param+=Param ("," param+=Param)*)? ");";
		public ParserRule getRule() { return rule; }

		//type=ID name=ID "(" (param+=Param ("," param+=Param)*)? ");"
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(param+=Param ("," param+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }

		//param+=Param
		public Assignment getParamAssignment_3_0() { return cParamAssignment_3_0; }

		//Param
		public RuleCall getParamParamParserRuleCall_3_0_0() { return cParamParamParserRuleCall_3_0_0; }

		//("," param+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//param+=Param
		public Assignment getParamAssignment_3_1_1() { return cParamAssignment_3_1_1; }

		//Param
		public RuleCall getParamParamParserRuleCall_3_1_1_0() { return cParamParamParserRuleCall_3_1_1_0; }

		//");"
		public Keyword getRightParenthesisSemicolonKeyword_4() { return cRightParenthesisSemicolonKeyword_4; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Param:
		//	type=ID name=ID;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class CParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//cParam:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class DParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//dParam:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCparamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCparamCParamParserRuleCall_3_0_0 = (RuleCall)cCparamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCparamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCparamCParamParserRuleCall_3_1_1_0 = (RuleCall)cCparamAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBehaviorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBehaviorsBehaviorParserRuleCall_6_0 = (RuleCall)cBehaviorsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Connector:
		//	"interface connector" name=ID "(" (cparam+=cParam ("," cparam+=cParam)*)? ")" "{" behaviors+=Behavior* "}";
		public ParserRule getRule() { return rule; }

		//"interface connector" name=ID "(" (cparam+=cParam ("," cparam+=cParam)*)? ")" "{" behaviors+=Behavior* "}"
		public Group getGroup() { return cGroup; }

		//"interface connector"
		public Keyword getInterfaceConnectorKeyword_0() { return cInterfaceConnectorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(cparam+=cParam ("," cparam+=cParam)*)?
		public Group getGroup_3() { return cGroup_3; }

		//cparam+=cParam
		public Assignment getCparamAssignment_3_0() { return cCparamAssignment_3_0; }

		//cParam
		public RuleCall getCparamCParamParserRuleCall_3_0_0() { return cCparamCParamParserRuleCall_3_0_0; }

		//("," cparam+=cParam)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//cparam+=cParam
		public Assignment getCparamAssignment_3_1_1() { return cCparamAssignment_3_1_1; }

		//cParam
		public RuleCall getCparamCParamParserRuleCall_3_1_1_0() { return cCparamCParamParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//behaviors+=Behavior*
		public Assignment getBehaviorsAssignment_6() { return cBehaviorsAssignment_6; }

		//Behavior
		public RuleCall getBehaviorsBehaviorParserRuleCall_6_0() { return cBehaviorsBehaviorParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInterfaceInterfaceCrossReference_0_0 = (CrossReference)cInterfaceAssignment_0.eContents().get(0);
		private final RuleCall cInterfaceInterfaceIDTerminalRuleCall_0_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cCallMethodCrossReference_2_0_0 = (CrossReference)cCallAssignment_2_0.eContents().get(0);
		private final RuleCall cCallMethodFQNParserRuleCall_2_0_0_1 = (RuleCall)cCallMethodCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCallAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cCallMethodCrossReference_2_1_1_0 = (CrossReference)cCallAssignment_2_1_1.eContents().get(0);
		private final RuleCall cCallMethodFQNParserRuleCall_2_1_1_0_1 = (RuleCall)cCallMethodCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cEndAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cEndInterfaceCrossReference_2_3_0 = (CrossReference)cEndAssignment_2_3.eContents().get(0);
		private final RuleCall cEndInterfaceIDTerminalRuleCall_2_3_0_1 = (RuleCall)cEndInterfaceCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Behavior:
		//	interface=[Interface] "=" (call+=[Method|FQN] ("->" call+=[Method|FQN])* "->" end=[Interface])? ";";
		public ParserRule getRule() { return rule; }

		//interface=[Interface] "=" (call+=[Method|FQN] ("->" call+=[Method|FQN])* "->" end=[Interface])? ";"
		public Group getGroup() { return cGroup; }

		//interface=[Interface]
		public Assignment getInterfaceAssignment_0() { return cInterfaceAssignment_0; }

		//[Interface]
		public CrossReference getInterfaceInterfaceCrossReference_0_0() { return cInterfaceInterfaceCrossReference_0_0; }

		//ID
		public RuleCall getInterfaceInterfaceIDTerminalRuleCall_0_0_1() { return cInterfaceInterfaceIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(call+=[Method|FQN] ("->" call+=[Method|FQN])* "->" end=[Interface])?
		public Group getGroup_2() { return cGroup_2; }

		//call+=[Method|FQN]
		public Assignment getCallAssignment_2_0() { return cCallAssignment_2_0; }

		//[Method|FQN]
		public CrossReference getCallMethodCrossReference_2_0_0() { return cCallMethodCrossReference_2_0_0; }

		//FQN
		public RuleCall getCallMethodFQNParserRuleCall_2_0_0_1() { return cCallMethodFQNParserRuleCall_2_0_0_1; }

		//("->" call+=[Method|FQN])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1_0() { return cHyphenMinusGreaterThanSignKeyword_2_1_0; }

		//call+=[Method|FQN]
		public Assignment getCallAssignment_2_1_1() { return cCallAssignment_2_1_1; }

		//[Method|FQN]
		public CrossReference getCallMethodCrossReference_2_1_1_0() { return cCallMethodCrossReference_2_1_1_0; }

		//FQN
		public RuleCall getCallMethodFQNParserRuleCall_2_1_1_0_1() { return cCallMethodFQNParserRuleCall_2_1_1_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_2() { return cHyphenMinusGreaterThanSignKeyword_2_2; }

		//end=[Interface]
		public Assignment getEndAssignment_2_3() { return cEndAssignment_2_3; }

		//[Interface]
		public CrossReference getEndInterfaceCrossReference_2_3_0() { return cEndInterfaceCrossReference_2_3_0; }

		//ID
		public RuleCall getEndInterfaceIDTerminalRuleCall_2_3_0_1() { return cEndInterfaceIDTerminalRuleCall_2_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceDflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDparamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDparamDParamParserRuleCall_3_0_0 = (RuleCall)cDparamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDparamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDparamDParamParserRuleCall_3_1_1_0 = (RuleCall)cDparamAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataflowsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataflowsDataflowParserRuleCall_6_0 = (RuleCall)cDataflowsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DFlow:
		//	"interface dflow" name=ID "(" (dparam+=dParam ("," dparam+=dParam)*)? ")" "{" dataflows+=Dataflow* "}";
		public ParserRule getRule() { return rule; }

		//"interface dflow" name=ID "(" (dparam+=dParam ("," dparam+=dParam)*)? ")" "{" dataflows+=Dataflow* "}"
		public Group getGroup() { return cGroup; }

		//"interface dflow"
		public Keyword getInterfaceDflowKeyword_0() { return cInterfaceDflowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(dparam+=dParam ("," dparam+=dParam)*)?
		public Group getGroup_3() { return cGroup_3; }

		//dparam+=dParam
		public Assignment getDparamAssignment_3_0() { return cDparamAssignment_3_0; }

		//dParam
		public RuleCall getDparamDParamParserRuleCall_3_0_0() { return cDparamDParamParserRuleCall_3_0_0; }

		//("," dparam+=dParam)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//dparam+=dParam
		public Assignment getDparamAssignment_3_1_1() { return cDparamAssignment_3_1_1; }

		//dParam
		public RuleCall getDparamDParamParserRuleCall_3_1_1_0() { return cDparamDParamParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//dataflows+=Dataflow*
		public Assignment getDataflowsAssignment_6() { return cDataflowsAssignment_6; }

		//Dataflow
		public RuleCall getDataflowsDataflowParserRuleCall_6_0() { return cDataflowsDataflowParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DataflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dataflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDparamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDparamDParamCrossReference_0_0 = (CrossReference)cDparamAssignment_0.eContents().get(0);
		private final RuleCall cDparamDParamIDTerminalRuleCall_0_0_1 = (RuleCall)cDparamDParamCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGetflowAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cGetflowDParamCrossReference_2_1_0 = (CrossReference)cGetflowAssignment_2_1.eContents().get(0);
		private final RuleCall cGetflowDParamIDTerminalRuleCall_2_1_0_1 = (RuleCall)cGetflowDParamCrossReference_2_1_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCallAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cCallMethodCrossReference_2_4_0 = (CrossReference)cCallAssignment_2_4.eContents().get(0);
		private final RuleCall cCallMethodFQNParserRuleCall_2_4_0_1 = (RuleCall)cCallMethodCrossReference_2_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cVerticalLineKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cGetflowAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final CrossReference cGetflowDParamCrossReference_2_7_0 = (CrossReference)cGetflowAssignment_2_7.eContents().get(0);
		private final RuleCall cGetflowDParamIDTerminalRuleCall_2_7_0_1 = (RuleCall)cGetflowDParamCrossReference_2_7_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		private final Assignment cGetIfAssignment_2_10 = (Assignment)cGroup_2.eContents().get(10);
		private final CrossReference cGetIfInterfaceCrossReference_2_10_0 = (CrossReference)cGetIfAssignment_2_10.eContents().get(0);
		private final RuleCall cGetIfInterfaceIDTerminalRuleCall_2_10_0_1 = (RuleCall)cGetIfInterfaceCrossReference_2_10_0.eContents().get(1);
		private final Group cGroup_2_11 = (Group)cGroup_2.eContents().get(11);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_0 = (Keyword)cGroup_2_11.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_11_1 = (Keyword)cGroup_2_11.eContents().get(1);
		private final Assignment cGetflowAssignment_2_11_2 = (Assignment)cGroup_2_11.eContents().get(2);
		private final CrossReference cGetflowDParamCrossReference_2_11_2_0 = (CrossReference)cGetflowAssignment_2_11_2.eContents().get(0);
		private final RuleCall cGetflowDParamIDTerminalRuleCall_2_11_2_0_1 = (RuleCall)cGetflowDParamCrossReference_2_11_2_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_11_3 = (Keyword)cGroup_2_11.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_4 = (Keyword)cGroup_2_11.eContents().get(4);
		private final Assignment cCallAssignment_2_11_5 = (Assignment)cGroup_2_11.eContents().get(5);
		private final CrossReference cCallMethodCrossReference_2_11_5_0 = (CrossReference)cCallAssignment_2_11_5.eContents().get(0);
		private final RuleCall cCallMethodFQNParserRuleCall_2_11_5_0_1 = (RuleCall)cCallMethodCrossReference_2_11_5_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_12 = (Keyword)cGroup_2.eContents().get(12);
		private final Assignment cEndAssignment_2_13 = (Assignment)cGroup_2.eContents().get(13);
		private final CrossReference cEndDParamCrossReference_2_13_0 = (CrossReference)cEndAssignment_2_13.eContents().get(0);
		private final RuleCall cEndDParamIDTerminalRuleCall_2_13_0_1 = (RuleCall)cEndDParamCrossReference_2_13_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dataflow:
		//	dparam=[dParam] "=" ("|" getflow+=[dParam] "|" "->>" call+=[Method|FQN] "->>" "|" getflow+=[dParam] "|" "->>"
		//	getIf+=[Interface] ("->>" "|" getflow+=[dParam] "|" "->>" call+=[Method|FQN])* "->>" end=[dParam])? ";";
		public ParserRule getRule() { return rule; }

		//dparam=[dParam] "=" ("|" getflow+=[dParam] "|" "->>" call+=[Method|FQN] "->>" "|" getflow+=[dParam] "|" "->>"
		//getIf+=[Interface] ("->>" "|" getflow+=[dParam] "|" "->>" call+=[Method|FQN])* "->>" end=[dParam])? ";"
		public Group getGroup() { return cGroup; }

		//dparam=[dParam]
		public Assignment getDparamAssignment_0() { return cDparamAssignment_0; }

		//[dParam]
		public CrossReference getDparamDParamCrossReference_0_0() { return cDparamDParamCrossReference_0_0; }

		//ID
		public RuleCall getDparamDParamIDTerminalRuleCall_0_0_1() { return cDparamDParamIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//("|" getflow+=[dParam] "|" "->>" call+=[Method|FQN] "->>" "|" getflow+=[dParam] "|" "->>" getIf+=[Interface] ("->>" "|"
		//getflow+=[dParam] "|" "->>" call+=[Method|FQN])* "->>" end=[dParam])?
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//getflow+=[dParam]
		public Assignment getGetflowAssignment_2_1() { return cGetflowAssignment_2_1; }

		//[dParam]
		public CrossReference getGetflowDParamCrossReference_2_1_0() { return cGetflowDParamCrossReference_2_1_0; }

		//ID
		public RuleCall getGetflowDParamIDTerminalRuleCall_2_1_0_1() { return cGetflowDParamIDTerminalRuleCall_2_1_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2_2() { return cVerticalLineKeyword_2_2; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_3() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_3; }

		//call+=[Method|FQN]
		public Assignment getCallAssignment_2_4() { return cCallAssignment_2_4; }

		//[Method|FQN]
		public CrossReference getCallMethodCrossReference_2_4_0() { return cCallMethodCrossReference_2_4_0; }

		//FQN
		public RuleCall getCallMethodFQNParserRuleCall_2_4_0_1() { return cCallMethodFQNParserRuleCall_2_4_0_1; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_5() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_5; }

		//"|"
		public Keyword getVerticalLineKeyword_2_6() { return cVerticalLineKeyword_2_6; }

		//getflow+=[dParam]
		public Assignment getGetflowAssignment_2_7() { return cGetflowAssignment_2_7; }

		//[dParam]
		public CrossReference getGetflowDParamCrossReference_2_7_0() { return cGetflowDParamCrossReference_2_7_0; }

		//ID
		public RuleCall getGetflowDParamIDTerminalRuleCall_2_7_0_1() { return cGetflowDParamIDTerminalRuleCall_2_7_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2_8() { return cVerticalLineKeyword_2_8; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_9() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_9; }

		//getIf+=[Interface]
		public Assignment getGetIfAssignment_2_10() { return cGetIfAssignment_2_10; }

		//[Interface]
		public CrossReference getGetIfInterfaceCrossReference_2_10_0() { return cGetIfInterfaceCrossReference_2_10_0; }

		//ID
		public RuleCall getGetIfInterfaceIDTerminalRuleCall_2_10_0_1() { return cGetIfInterfaceIDTerminalRuleCall_2_10_0_1; }

		//("->>" "|" getflow+=[dParam] "|" "->>" call+=[Method|FQN])*
		public Group getGroup_2_11() { return cGroup_2_11; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_0() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_11_1() { return cVerticalLineKeyword_2_11_1; }

		//getflow+=[dParam]
		public Assignment getGetflowAssignment_2_11_2() { return cGetflowAssignment_2_11_2; }

		//[dParam]
		public CrossReference getGetflowDParamCrossReference_2_11_2_0() { return cGetflowDParamCrossReference_2_11_2_0; }

		//ID
		public RuleCall getGetflowDParamIDTerminalRuleCall_2_11_2_0_1() { return cGetflowDParamIDTerminalRuleCall_2_11_2_0_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2_11_3() { return cVerticalLineKeyword_2_11_3; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_4() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_4; }

		//call+=[Method|FQN]
		public Assignment getCallAssignment_2_11_5() { return cCallAssignment_2_11_5; }

		//[Method|FQN]
		public CrossReference getCallMethodCrossReference_2_11_5_0() { return cCallMethodCrossReference_2_11_5_0; }

		//FQN
		public RuleCall getCallMethodFQNParserRuleCall_2_11_5_0_1() { return cCallMethodFQNParserRuleCall_2_11_5_0_1; }

		//"->>"
		public Keyword getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_12() { return cHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_12; }

		//end=[dParam]
		public Assignment getEndAssignment_2_13() { return cEndAssignment_2_13; }

		//[dParam]
		public CrossReference getEndDParamCrossReference_2_13_0() { return cEndDParamCrossReference_2_13_0; }

		//ID
		public RuleCall getEndDParamIDTerminalRuleCall_2_13_0_1() { return cEndDParamIDTerminalRuleCall_2_13_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// * some definition Directions
		// * 
		// * "getflow"-> get flow_name (for instance:"state"), 
		// * "call"-> get Method_name (for instance:"getState" and so on), 
		// * "getIf"-> get Interface_name (for instance:"Subject" or "Observer").
		// * / FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final InterfaceElements pInterface;
	private final MethodElements pMethod;
	private final ParamElements pParam;
	private final CParamElements pCParam;
	private final DParamElements pDParam;
	private final ConnectorElements pConnector;
	private final BehaviorElements pBehavior;
	private final DFlowElements pDFlow;
	private final DataflowElements pDataflow;
	private final FQNElements pFQN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArchDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pInterface = new InterfaceElements();
		this.pMethod = new MethodElements();
		this.pParam = new ParamElements();
		this.pCParam = new CParamElements();
		this.pDParam = new DParamElements();
		this.pConnector = new ConnectorElements();
		this.pBehavior = new BehaviorElements();
		this.pDFlow = new DFlowElements();
		this.pDataflow = new DataflowElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jp.ac.kyushu.iarch.archdsl.ArchDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	interfaces+=Interface* behaviors+=Behavior* connectors+=Connector* dflows+=DFlow*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Interface:
	//	"interface component" name=ID "{" methods+=Method* "}";
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Method:
	//	type=ID name=ID "(" (param+=Param ("," param+=Param)*)? ");";
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Param:
	//	type=ID name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//cParam:
	//	name=ID;
	public CParamElements getCParamAccess() {
		return pCParam;
	}
	
	public ParserRule getCParamRule() {
		return getCParamAccess().getRule();
	}

	//dParam:
	//	name=ID;
	public DParamElements getDParamAccess() {
		return pDParam;
	}
	
	public ParserRule getDParamRule() {
		return getDParamAccess().getRule();
	}

	//Connector:
	//	"interface connector" name=ID "(" (cparam+=cParam ("," cparam+=cParam)*)? ")" "{" behaviors+=Behavior* "}";
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}

	//Behavior:
	//	interface=[Interface] "=" (call+=[Method|FQN] ("->" call+=[Method|FQN])* "->" end=[Interface])? ";";
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//DFlow:
	//	"interface dflow" name=ID "(" (dparam+=dParam ("," dparam+=dParam)*)? ")" "{" dataflows+=Dataflow* "}";
	public DFlowElements getDFlowAccess() {
		return pDFlow;
	}
	
	public ParserRule getDFlowRule() {
		return getDFlowAccess().getRule();
	}

	//Dataflow:
	//	dparam=[dParam] "=" ("|" getflow+=[dParam] "|" "->>" call+=[Method|FQN] "->>" "|" getflow+=[dParam] "|" "->>"
	//	getIf+=[Interface] ("->>" "|" getflow+=[dParam] "|" "->>" call+=[Method|FQN])* "->>" end=[dParam])? ";";
	public DataflowElements getDataflowAccess() {
		return pDataflow;
	}
	
	public ParserRule getDataflowRule() {
		return getDataflowAccess().getRule();
	}

	/// * some definition Directions
	// * 
	// * "getflow"-> get flow_name (for instance:"state"), 
	// * "call"-> get Method_name (for instance:"getState" and so on), 
	// * "getIf"-> get Interface_name (for instance:"Subject" or "Observer").
	// * / FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
