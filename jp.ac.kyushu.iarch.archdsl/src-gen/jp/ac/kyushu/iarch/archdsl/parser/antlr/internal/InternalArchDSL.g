/*
* generated by Xtext
*/
grammar InternalArchDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.ac.kyushu.iarch.archdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.ac.kyushu.iarch.archdsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.ac.kyushu.iarch.archdsl.services.ArchDSLGrammarAccess;

}

@parser::members {

 	private ArchDSLGrammarAccess grammarAccess;
 	
    public InternalArchDSLParser(TokenStream input, ArchDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ArchDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getInterfacesInterfaceParserRuleCall_0_0()); 
	    }
		lv_interfaces_0_0=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"interfaces",
        		lv_interfaces_0_0, 
        		"Interface");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBehaviorsBehaviorParserRuleCall_1_0()); 
	    }
		lv_behaviors_1_0=ruleBehavior		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_1_0, 
        		"Behavior");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getConnectorsConnectorParserRuleCall_2_0()); 
	    }
		lv_connectors_2_0=ruleConnector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"connectors",
        		lv_connectors_2_0, 
        		"Connector");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDflowsDFlowParserRuleCall_3_0()); 
	    }
		lv_dflows_3_0=ruleDFlow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"dflows",
        		lv_dflows_3_0, 
        		"DFlow");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceAccess().getInterfaceComponentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getMethodsMethodParserRuleCall_3_0()); 
	    }
		lv_methods_3_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_3_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getMethodAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamParamParserRuleCall_3_0_0()); 
	    }
		lv_param_3_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamParamParserRuleCall_3_1_1_0()); 
	    }
		lv_param_5_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_5_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=');' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getParamAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulecParam
entryRulecParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCParamRule()); }
	 iv_rulecParam=rulecParam 
	 { $current=$iv_rulecParam.current; } 
	 EOF 
;

// Rule cParam
rulecParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCParamAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuledParam
entryRuledParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDParamRule()); }
	 iv_ruledParam=ruledParam 
	 { $current=$iv_ruledParam.current; } 
	 EOF 
;

// Rule dParam
ruledParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDParamAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	 iv_ruleConnector=ruleConnector 
	 { $current=$iv_ruleConnector.current; } 
	 EOF 
;

// Rule Connector
ruleConnector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface connector' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getInterfaceConnectorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConnectorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConnectorAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getCparamCParamParserRuleCall_3_0_0()); 
	    }
		lv_cparam_3_0=rulecParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		add(
       			$current, 
       			"cparam",
        		lv_cparam_3_0, 
        		"cParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConnectorAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getCparamCParamParserRuleCall_3_1_1_0()); 
	    }
		lv_cparam_5_0=rulecParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		add(
       			$current, 
       			"cparam",
        		lv_cparam_5_0, 
        		"cParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConnectorAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConnectorAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectorAccess().getBehaviorsBehaviorParserRuleCall_6_0()); 
	    }
		lv_behaviors_8_0=ruleBehavior		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectorRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_8_0, 
        		"Behavior");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConnectorAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	 iv_ruleBehavior=ruleBehavior 
	 { $current=$iv_ruleBehavior.current; } 
	 EOF 
;

// Rule Behavior
ruleBehavior returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBehaviorAccess().getInterfaceInterfaceCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorAccess().getEqualsSignKeyword_1());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getCallMethodCrossReference_2_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorAccess().getHyphenMinusGreaterThanSignKeyword_2_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getCallMethodCrossReference_2_1_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBehaviorAccess().getHyphenMinusGreaterThanSignKeyword_2_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getBehaviorAccess().getEndInterfaceCrossReference_2_3_0()); 
	}

)
))?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBehaviorAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleDFlow
entryRuleDFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDFlowRule()); }
	 iv_ruleDFlow=ruleDFlow 
	 { $current=$iv_ruleDFlow.current; } 
	 EOF 
;

// Rule DFlow
ruleDFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface dflow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDFlowAccess().getInterfaceDflowKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDFlowAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDFlowAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDFlowAccess().getDparamDParamParserRuleCall_3_0_0()); 
	    }
		lv_dparam_3_0=ruledParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDFlowRule());
	        }
       		add(
       			$current, 
       			"dparam",
        		lv_dparam_3_0, 
        		"dParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDFlowAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDFlowAccess().getDparamDParamParserRuleCall_3_1_1_0()); 
	    }
		lv_dparam_5_0=ruledParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDFlowRule());
	        }
       		add(
       			$current, 
       			"dparam",
        		lv_dparam_5_0, 
        		"dParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDFlowAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDFlowAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDFlowAccess().getDataflowsDataflowParserRuleCall_6_0()); 
	    }
		lv_dataflows_8_0=ruleDataflow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDFlowRule());
	        }
       		add(
       			$current, 
       			"dataflows",
        		lv_dataflows_8_0, 
        		"Dataflow");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDFlowAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDataflow
entryRuleDataflow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataflowRule()); }
	 iv_ruleDataflow=ruleDataflow 
	 { $current=$iv_ruleDataflow.current; } 
	 EOF 
;

// Rule Dataflow
ruleDataflow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDataflowAccess().getDparamDParamCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataflowAccess().getEqualsSignKeyword_1());
    }
(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDataflowAccess().getGetflowDParamCrossReference_2_1_0()); 
	}

)
)	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_2());
    }
	otherlv_5='->>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataflowAccess().getCallMethodCrossReference_2_4_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='->>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_5());
    }
	otherlv_8='|' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getDataflowAccess().getGetflowDParamCrossReference_2_7_0()); 
	}

)
)	otherlv_10='|' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_8());
    }
	otherlv_11='->>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getDataflowAccess().getGetIfInterfaceCrossReference_2_10_0()); 
	}

)
)(	otherlv_13='->>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_0());
    }
	otherlv_14='|' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_11_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getDataflowAccess().getGetflowDParamCrossReference_2_11_2_0()); 
	}

)
)	otherlv_16='|' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDataflowAccess().getVerticalLineKeyword_2_11_3());
    }
	otherlv_17='->>' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_11_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataflowAccess().getCallMethodCrossReference_2_11_5_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19='->>' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getDataflowAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_2_12());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRule());
	        }
        }
	otherlv_20=RULE_ID
	{
		newLeafNode(otherlv_20, grammarAccess.getDataflowAccess().getEndDParamCrossReference_2_13_0()); 
	}

)
))?	otherlv_21=';' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getDataflowAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


