/*
* generated by Xtext
*/
package jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jp.ac.kyushu.iarch.archdsl.services.ArchDSLGrammarAccess;

public class ArchDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private ArchDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr.internal.InternalArchDSLParser createParser() {
		jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr.internal.InternalArchDSLParser result = new jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr.internal.InternalArchDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_0(), "rule__Model__Alternatives_0");
					put(grammarAccess.getUncertainInterfaceAccess().getAlternatives_4(), "rule__UncertainInterface__Alternatives_4");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getUncertainInterfaceAccess().getGroup(), "rule__UncertainInterface__Group__0");
					put(grammarAccess.getUncertainInterfaceAccess().getGroup_2(), "rule__UncertainInterface__Group_2__0");
					put(grammarAccess.getInterfaceAccess().getGroup(), "rule__Interface__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
					put(grammarAccess.getAltMethodAccess().getGroup(), "rule__AltMethod__Group__0");
					put(grammarAccess.getAltMethodAccess().getGroup_0(), "rule__AltMethod__Group_0__0");
					put(grammarAccess.getAltMethodAccess().getGroup_2(), "rule__AltMethod__Group_2__0");
					put(grammarAccess.getAltMethodAccess().getGroup_2_3(), "rule__AltMethod__Group_2_3__0");
					put(grammarAccess.getAltMethodAccess().getGroup_2_3_1(), "rule__AltMethod__Group_2_3_1__0");
					put(grammarAccess.getAltMethodAccess().getGroup_6(), "rule__AltMethod__Group_6__0");
					put(grammarAccess.getAltMethodAccess().getGroup_6_1(), "rule__AltMethod__Group_6_1__0");
					put(grammarAccess.getOptMethodAccess().getGroup(), "rule__OptMethod__Group__0");
					put(grammarAccess.getOptMethodAccess().getGroup_0(), "rule__OptMethod__Group_0__0");
					put(grammarAccess.getOptMethodAccess().getGroup_5(), "rule__OptMethod__Group_5__0");
					put(grammarAccess.getOptMethodAccess().getGroup_5_1(), "rule__OptMethod__Group_5_1__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup_3(), "rule__Behavior__Group_3__0");
					put(grammarAccess.getBehaviorAccess().getGroup_3_1(), "rule__Behavior__Group_3_1__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getModelAccess().getInterfacesAssignment_0_0(), "rule__Model__InterfacesAssignment_0_0");
					put(grammarAccess.getModelAccess().getU_interfacesAssignment_0_1(), "rule__Model__U_interfacesAssignment_0_1");
					put(grammarAccess.getModelAccess().getBehaviorsAssignment_1(), "rule__Model__BehaviorsAssignment_1");
					put(grammarAccess.getUncertainInterfaceAccess().getNameAssignment_1(), "rule__UncertainInterface__NameAssignment_1");
					put(grammarAccess.getUncertainInterfaceAccess().getSuperInterfaceAssignment_2_1(), "rule__UncertainInterface__SuperInterfaceAssignment_2_1");
					put(grammarAccess.getUncertainInterfaceAccess().getAltmethodsAssignment_4_0(), "rule__UncertainInterface__AltmethodsAssignment_4_0");
					put(grammarAccess.getUncertainInterfaceAccess().getOptmethodsAssignment_4_1(), "rule__UncertainInterface__OptmethodsAssignment_4_1");
					put(grammarAccess.getInterfaceAccess().getNameAssignment_1(), "rule__Interface__NameAssignment_1");
					put(grammarAccess.getInterfaceAccess().getMethodsAssignment_3(), "rule__Interface__MethodsAssignment_3");
					put(grammarAccess.getMethodAccess().getTypeAssignment_0(), "rule__Method__TypeAssignment_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamAssignment_3_0(), "rule__Method__ParamAssignment_3_0");
					put(grammarAccess.getMethodAccess().getParamAssignment_3_1_1(), "rule__Method__ParamAssignment_3_1_1");
					put(grammarAccess.getAltMethodAccess().getCallInterfaceAssignment_0_0(), "rule__AltMethod__CallInterfaceAssignment_0_0");
					put(grammarAccess.getAltMethodAccess().getTypeAssignment_2_0(), "rule__AltMethod__TypeAssignment_2_0");
					put(grammarAccess.getAltMethodAccess().getNameAssignment_2_1(), "rule__AltMethod__NameAssignment_2_1");
					put(grammarAccess.getAltMethodAccess().getParamAssignment_2_3_0(), "rule__AltMethod__ParamAssignment_2_3_0");
					put(grammarAccess.getAltMethodAccess().getParamAssignment_2_3_1_1(), "rule__AltMethod__ParamAssignment_2_3_1_1");
					put(grammarAccess.getAltMethodAccess().getTypeAssignment_3(), "rule__AltMethod__TypeAssignment_3");
					put(grammarAccess.getAltMethodAccess().getNameAssignment_4(), "rule__AltMethod__NameAssignment_4");
					put(grammarAccess.getAltMethodAccess().getParamAssignment_6_0(), "rule__AltMethod__ParamAssignment_6_0");
					put(grammarAccess.getAltMethodAccess().getParamAssignment_6_1_1(), "rule__AltMethod__ParamAssignment_6_1_1");
					put(grammarAccess.getOptMethodAccess().getCallInterfaceAssignment_0_0(), "rule__OptMethod__CallInterfaceAssignment_0_0");
					put(grammarAccess.getOptMethodAccess().getTypeAssignment_2(), "rule__OptMethod__TypeAssignment_2");
					put(grammarAccess.getOptMethodAccess().getNameAssignment_3(), "rule__OptMethod__NameAssignment_3");
					put(grammarAccess.getOptMethodAccess().getParamAssignment_5_0(), "rule__OptMethod__ParamAssignment_5_0");
					put(grammarAccess.getOptMethodAccess().getParamAssignment_5_1_1(), "rule__OptMethod__ParamAssignment_5_1_1");
					put(grammarAccess.getParamAccess().getTypeAssignment_0(), "rule__Param__TypeAssignment_0");
					put(grammarAccess.getParamAccess().getNameAssignment_1(), "rule__Param__NameAssignment_1");
					put(grammarAccess.getBehaviorAccess().getInterfaceAssignment_0(), "rule__Behavior__InterfaceAssignment_0");
					put(grammarAccess.getBehaviorAccess().getCallAssignment_3_0(), "rule__Behavior__CallAssignment_3_0");
					put(grammarAccess.getBehaviorAccess().getCallAssignment_3_1_1(), "rule__Behavior__CallAssignment_3_1_1");
					put(grammarAccess.getBehaviorAccess().getEndAssignment_3_3(), "rule__Behavior__EndAssignment_3_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr.internal.InternalArchDSLParser typedParser = (jp.ac.kyushu.iarch.archdsl.ui.contentassist.antlr.internal.InternalArchDSLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ArchDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ArchDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
